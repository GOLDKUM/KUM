2021-02-24
ⓚ금경용
<소스페이지에 가시면 더욱 상세히 보실 수 있습니다>
함☆수
	함수 정의 및 사용	
	함수 매개변수
	람다식
	파이썬의 내장함수(enumerate,filter,map,)

★함수정의(입력값을 받아 출력)
 INPUT x -> def f(x): 	->OUTPUT f(x)
	         expression
★def function_name([param1,param2,...,param_limit=0]):
	"""docstring"""
	expression
	
	※def : 함수를 정의하기 위해 사용하는 키워드
	※function_name: 함수의 이름(원칙적으로 소문자, 단어와 단어사이 _  , _or숫자로 시작하지 않음)
	※param1, param2,.. 매개변수 (매개변수 없는 함수도가능)
	※param_limit=0 기본값을 갖는 매개변수(선택 매개변수)
		※param_limit=[] 일경우 기본변수가 리스트,딕셔너리 또는 클래스의 인스턴스와 같은 변경 가능한 객체 일 때 호출시마다 전달
		※function_name(param1=50) 키워드 인수 기본값을 갖는 파라미터는 생략 가능 
	※docstring: 함수 인터페이스를 설명하는 문자열
	※expression: 함수가 실행할 구문. 들여쓰기가 가장 중요! 

★매개변수: 함수가 실행 할때 필요한 값
★인수: 함수호출시 전달되는 값 
	※param1, param2,.. 매개변수 
	function_name(value1,value2,...)
	※value1,value2 인수 또는 인자 

★변수의 참조 
	지역변수: 함수 안에 정의된 변수
	로컬 심볼 테이블: 함수가 실행될 떄 함수내의 모든 지역변수들을 해당 함수의 로컬 심볼 테이블에 값을 저장
	전역 테이블 :함수 밖에 정의된 전역변수들을 저장하는 공간
	※변수의 값을 조회 순서!
	먼저 로컬 심볼 테이블 > 전역 심볼 테이블 > 내장 된 이름 테이블
	global로 지정하면 전역 변수로

★튜플 인수
	매개변수 앞에 *를 붙여 정의
	인수들이 튜플에 저장되어 전달
	함수: def test(*args)
	호출: test(1,2,3,4) -> args : (1, 2, 3, 4)
	ex)
	def add(*args):
	    sum=0
	    for sum in args:
		sum+=num
	    return sum
	
	결과 add(10,20)          30
	       add(10,20,30,40)  100
		
★딕셔너리 인수
	**name 형식의 최종 형식 매개 변수가 있으면 형식 매개 변수에 해당하는 것을 제외하고 모든 키워드 인수가 들어있는 딕셔너리를 받음
	함수 : def test(**args)
	호출 : test(a=1, b=2, c=3) -> args : {'a' : 1, 'b' : 2, 'c' : 3}

★매개변수를 이용한 가변인수 순서
	 매개변수의 순서는 순서 인자, 튜플 인자, 키워드 인자, 딕셔너리 인자를 받을 수 있는 순서로 정의
	def func(a,b,c,*d,e=10,**f):
		print(a,b,c,d,e,f)
	func(10,20,30,(4,5),e=20,name='KUM')
 	결과 10 20 30 (4,5) 20 {'name':'KUM'}

★람다식
	람다식은 작은 익명함수를 의미함
	실행할 문장을 한문장만 작성할 수 있음
	
	lambda variable_define : statements
	   variable_define : 함수의 인수를 정의
	   statement : 함수가 실행할 문장을 작성
		      한 문장만 작성할 수 있음
		     return 구문이 없어도 statement결과를 반환함
 	   
	ex)
	data =[1,2,3,4,5]
	list(filter(lambda x:x%2==1,data))
	결과 [1,3,5]

★ 파이썬 내장 함수	
	 import 하지 않고 즉시 사용 가능한 함수
	내장 함수명은 일종의 키워드로 간주되므로 식별자로 사용하는 것은 피하여야 함
	★●중요●★
	 ※enumerate() 함수는 인덱스와 아이템을 하나씩 튜플 형식으로 반환
	 ※filter() 함수는 iterable 객체의 아이템들 중에서 func() 함수의 결과가 True인 경우의 아이템들만 묶어서 반환
	 ※map()  함수는 iterable의 각 요소를 func()의 반환값으로 매핑해서 이터레이터로 반환 
	