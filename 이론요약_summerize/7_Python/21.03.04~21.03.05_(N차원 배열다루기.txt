2021-03-04~05
ⓚ금경용
<소스페이지에 가시면 더욱 상세히 보실 수 있습니다>

★N차원 배열 다루기
	N차원 배열 객체
	C언어로 구현된 고성능 수치계산 패키지 Numpy 이용
	C/C+, 포트란 코드 통합도구

★넘파이 주요 함수
	배열 만들기:arange, array, copy, empty, empty_like, eye, fromfile, fromfunction, identity, 
		linspace, logspace, mgrid, ogrid, ones, ones_like, r, zeros, zeros_like
	모양 바꾸기:ndarray.astype, atleast_1d, atleast_2d, atleast_3d, mat
	배열 조작하기:array_split, column_stack, concatenate, diagonal, dsplit, dstack, hsplit, hstack, ndarray.item, newaxis, ravel, repeat, reshape, resize, squeeze, swapaxes, take, 
			transpose, vsplit, vstack
	찾기:all, any, nonzero, where
	정렬하기:argmax, argmin, argsort, max, min, ptp, searchsorted, sort
	배열 운영하기:choose, compress, cumprod, cumsum, inner, ndarray.fill, imag, prod, put, putmask, real, sum
	기초 통계:cov, mean, std, var
	선형 대수	:cross, dot, outer, linalg.svd, vdot


	import numpy as np
	ndarray 속성:
	a=np.arange(15).reshape(3,5) 
	type(a) # a변수 자체의 타입 : N차원배열 numpy.ndarray
	a.dtype # a변수의 요소들의 type dtype('int32')
	a.dtype.name # a변수의 요소들의 type int32
	a.itemsize # 요소하나하나 사이즈(byte 단위) 4
	a.ndim # 축수 (차원수) 2
	a.shape # 배열 구조 (3, 5)
	a.size # a 배열 요소의 총수 15

★넘파이 배열	
	 array()함수로 넘파이 배열 만들기
	numpy.array(object,dtype=None,copy=True)
	a = np.array([1,6,9.1]).reshape(3,1)

★기본값 배열
	zeros : 요소가 다 0
	ones : 요소가 다 1
	empty : 초기 내용은 임의값인 배열(메모리 상태에 따라 달라짐)
	이렇게 생성된 배열은 기본 dtype은 float64. dtype 속성을 따로 지정할 수 있음
	ex)	np.zeros((3,4))
		np.ones((2,3,4),dtype=np.int16)
		np.empty((2,3))

★연속된 값 배열
	np.arange(from, to, by, type=None) : from부터 by씩 건너뛴 값을 to 앞까지(to미포함) 목록으로 N차원 배열 만듦. from 생략시 0, by생략시 1
	np.linspace(from, to, num) : from부터 to까지(to포함) num개 숫자들을 N차원 배열로 
	ex)	np.arange(10,30,5, dtype=np.float64)
		from numpy import linspace
		linspace(0,2,9)

★배열의 차원 변경
	t = np.random.random((3,4)) # 3행 4열 2차원 배열(random수) 0~1사이
	a = np.floor(t*10)
	a.ravel() # 차원이 풀린 배열을 반환(a가 바뀌는 것은 아님)
	a.reshape(2,6) # shape가 수정된 배열을 반환(a는 그대로)
	a.reshape(3,-1) # -1로 주어지면 해당 차원의 크기가 자동 계산
	a.resize((3,-1)) #resize -1 불가
	a.T # 전치행렬(행과 열을 거꾸로) =a.transpose() 

★배열 인쇄
	numpy.set_printoptions(threshold=None)
	넘파이가 전체 배열을 인쇄하도록 하려면 set_printoptions() 함수를 사용하여 인쇄 옵션을 변경

★복합대입 연산자 사용 (+=, -=, *=, ...)
★배열 축별 집계
	a =  np.arange(24).reshape(2,3,4)
	a.sum(axis=1))# 배열의 행별 합
	a.sum(axis=0))#배열의 열별 합
	a.max(axis=1))#배열의 행별 최대값
	a.max(axis=0))#배열의 열별 최대값
	a.min(axis=1)#배열의 행별 최소값
	a.min(axis=0)#배열의 열별 최소값
	a.cumsum(axis=1) # 행별로 누적합	
	a.cumsum(axis=0) # 열별 누적합

★브로드 캐스팅
	브로드 캐스팅하려면 연산의 두 배열에 대한 후미 축의 크기가 동일한 크기이거나 둘 중 하나가 1이어야 한다.’
	# 1차원 배열의 경우
	from numpy import array
	a = array([1,2,3])
	np.add(a, 10)
	
	# 2차원 배열의 경우 두배열의 후미 축(열)의 크기가 동일
	a = array([[0., 0, 0,],
           		[10.,10.,10.],
           		[20,20,20],
          		 [30,30,30,]])
	b = array([5,5,5])
	np.add(a,b)
	np.multiply(a, b)#곱하기
	
	from numpy import array, newaxis
	a = array([0,10,20,30])
	b = array([1,2,3])
	np.add(a[:, newaxis],b)# 4x1 배열 + 1x3 배열

★슬라이싱
	 np_array_obj[ start : stop : step ] 
		start부터 stop까지(stop 위치 포함 안함) step 마다 요소
	2차원 배열 인덱싱
		 np_array_obj[축1인덱스, 축2인덱스]
	3차원 배열 인덱싱
		np_array_obj[축1인덱스, 축2인덱스, 축3인덱스] 

★두 배열을 쌓아 합치기
	- vstack(tup) : 아래에 추가하는 방식으로 쌓아 합침
	- hstack(tup) : 옆으로 추가하는 방식으로 쌓아 합침
	- dstack(tup) : 마지막 축(열)을 쌓아 합침. 0열들끼리 쌓고, 1열끼리 쌓고
	-column_stack(tup) : 1차원 배열을 열단위로 배열하여 2차원 배열로
	- row_stack(tup) ; vstack()과 같음. 행단위로 쌓아줌
	-stack(ary_tup, axis=0) ; axis속성에 따라 넘파이 배열을 합침
	-r_[] 행	축을 따라 번호를 나열해 배열을 만들 때
	-c_[] 열	축을 따라 번호를 나열해 배열을 만들 때
	
★하나의 배열을 여러 개 작은 배열로 분할하기
	- hsplit(ary, indices_or_sections) ; 두번째 축(2차원의 경우 세로축)을 따라 분할
		split() 함수의 axis 매개 변수가 1일 때와 같음
	- vsplit(ary, indices_or_sections) ; 첫번째 축(2차원의 경우 가로축)을 따라 분할
		split() 함수의 axis 매개 변수가 0일 때와 같음
	- dsplit(ary, indices_or_sections) ; 3번째 차원을 나눔
		split() 함수의 axis 매개 변수가 3일 때와 같음
	**- split(ary, indices_or_sections, axis=?)
		* axis=0이면, vsplit()과 동일
 		* axis=1이면, hsplit()과 동일
 		* axis=2이면, 3차원 이상에서 동작하며 dsplit()동일

★복사와 뷰
	얕은 복사 뷰(view)
	뷰는 동일한 데이터를 공유 할 수 있는 다른 객체  view() 함수는 동일한 데이터를 보는 새로운 배열객체를 생성
	c = a.view()
	c.flags.owndata #False c가 메모리를 직접 소유하지는 않음
	c데이터 수정을 하면  a데이터도 자동적으로 바뀜

	깊은 복사 카피(copy)
	 copy() 함수는 배열 및 해당 데이터의 전체 복사본을 생성
	d = a.copy()
	d.flags.owndata #True d객체가 메모리를 직접 소유

★ix_() 함수
	N개의 1차원 시퀀스 배열을 입력받아 N차원 N개를 반환
	ex)
	a = np.array([1,2,3,4]) 
	b = np.array([11,12,13])
	ax, bx = np.ix_(a,b)
	ax# a[:, np.newaxis] 유사

★선형대수
	2차원 넘파이 배열을 행렬
		행렬곱 : @ 또는 np.dot()
		역행렬 : np.linalg.inv(x)
		전치행렬 : x.T, x.tanspose()
		nxn 단위행렬 : np.eye(n)
		대각합 : np.trace(x)
		연립방정식 해 풀기 : np.linalg.solve(a, b)


	
	

