2021-02-23
ⓚ금경용
<소스페이지에 가시면 더욱 상세히 보실 수 있습니다>

★제어문(if, for - in, while, 중첩 가능, 중첩루프탈출)
              조건문 , 반복문, 중첩루프 ,중첩루프탈출 

★조건문
	if(조건식은 반드시 True 또는 False로 판별):
		조건식이 True일 경우 실행할 문장
	elif조건식:
		조건식이 True일 경우 실행할 문장
	else: 
		모든 조건식이 False일 경우 실행할 문장 
	※다른언어와 다르게 들여쓰기가 안되어있으면 파이썬은 실행이 되지 않는다 
	       if 구문 다음의 들여쓰기 간격과 elif 구문 다음의 들여쓰기 간격 주의

		
★반복문 
	for - in
	변수-나열 가능한 자료에서 하나씩 빼내서 저장할 변수 또는 변수의 목록
	나열가능한자료-변수를 저장한 이름 (리스트,튜플,딕셔너리,셋 등)
	for 변수 in 나열가능한자료:
		반복할 문장1
		반복할 문장2
	..
	else :#(else 구문은 선택사항)
		변수에 값이 할당되지 않은 경우 한번 실행할 문장

	range(from,to,by)
		from부터 to까지 by만큼 증가하면서
		for문과 range 같이 자주 사용 
		ex) for i in range(0,10)
			print(i,end= ' ')

★while
	while 조건 :
	반복할 문장1
	반복할 문장2
	....
	else:
	조건이 거짓일 경우 실행할 문장
	else 구문은 선택사항
	무한 반복문에 빠지지 않도록 조건식이 바뀔 수 있는 변수값을 수정하는 코드 필요

★break, continue
	break를 만나면 break를 포함하는 반복문을 탈출
	continue는 반복문 내에서 continue 이후의 문장을 건너뜀

★중첩루프 ; 반복문 안에 반복문
	2차원 이상의 데이터 구조의 모든 항목들을 처리하기 위해 사용
	row차원 데이터에서 추출한 1개의 행
	rows 2중 반복문일 경우 2차원 데이터
	for row in rows:
		바깥 반복문을 처리할 문장
		…
		for data in row :
 			안쪽 반복문을 처리할 문장 1
 			안쪽 반복문을 처리할 문장 2
 			…
		 바깥 반복문을 처리할 문장
	ex)
	list_2d = [[1,2,3,4,5],
           		[10,20,30,40],
           		[11,22,33,44]]
	for i in range(len(list_2d)):
    	     for j in range(len(list_2d[i])):
        		print("{}행{}열 : {}".format(i, j, list_2d[i][j]), end='\t')
  	     print()
	
		
★중첩루프 탈출
	프로그래머가 바깥 쪽을 둘러싸는 루프의 다음 반복으로 이동하거나 한번에 여러 루프를 종료하려는 경우에는 
	레이블이 지정된 break를 모방 하는 일반적인 방법으로 플래그 값을 지정
	
	# break를 만나면 바깥쪽 반복문까지 탈출 ; 방법1. 플래그 변수 이용
	break_out_flag = False
	for a in range(3):
	    for b in range(1,3):
	        if a == b:
	            break_out_flag = True
	            break;
	        print(a, b)
	    if break_out_flag:
	        break;

	# break를 만나면 바깥쪽 반복문까지 탈출 ; 방법2. Exception 이용
	class BreakOutLoop(Exception):
	 pass # 아무것도 추가하지 않겠다
	
	for a in range(3):
	    try:
	        for b in range(1,3):
	            if a == b:
	                raise BreakOutLoop
	            print(a, b)
	    except BreakOutLoop :
	        break;