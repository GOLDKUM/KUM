2021-02-22
ⓚ금경용
<소스페이지에 가시면 더욱 상세히 보실 수 있습니다>
★데이터구조

★리스트
[,]를 이용
파이썬의 인덱스는 0부터 시작 

변수명 = [...]: 1차원
변수명 = [[...],...]: 2차원
변수명 = [[...],...],...]: 3차원
ex)numbers_2d=[[1,2,3],[10,20,30],[1,5,9]

★len():길이(항목의수)
★min(),max() :최대값 최소값 ※단 2차원 이상부터는 첫인덱스값만 비교
★+: 두 리스트를 연결 
★*: 리스트를 곱한 수만큼 반복
	numbers=[1,2,3]
	numbers=numbers+numbers
	3*numbers

★append() 단일 항목을 맨 뒤에 추가
★extend() 리스트를 항목별로 
★insert()  지정한 인덱스 위치에 삽입
	※append와 extend의 차이 
	append 그자체를 원소로 넣습니다(즉! 통쨰로 넣습니다)
	extend은 iterable의 각 항목들을 넣습니다.

★count() 리스트에서 데이터의 갯수를 반환 
★index() 해당 항목의 위치 반환 ※찾지 못하면 에러발생 
	# a.index(value, start, end) 
	a 리스트에서 start번째 ~ end번째 위치에서 value(값)의 위치 찾기

[index]:인덱스를 이용한 직접 접근
[start:stop:step]

★인덱스수정
★지정한 인덱스 위치의 데이터를 교체
	ex(number[1]=100)
	ex(number[0:2]=[1,2,3,4,5])※변경 인덱스보다 많아도 추가적으로 들어감 

★pop() : 맨 뒤의 항목 반환 및 삭제 
★remove() : 해당 항목 삭제 
★del: 지정한 위치 항목 삭제, 변수삭제 
★clear() : 모든항목 삭제 

★정렬하기 
sort():정렬(reverse=True 속성을 이용하면 내림차순 정렬)
reverse(): 역순으로 나열 
[::-1]:역순으로 나열 
※sort()와 reverse()는 원본데이터를 변경하지만 [::-1]은 역순으로 출력하고 원본데이터는 바꾸지 않습니다.

★copy(): 복제된 새로운 객체를 생성
=: 주소를 복제해 같은 객체 참조 
즉! number=score (주소 복사)
     number=score.copy(새로운 객체 생성,주소가 다름)


☆튜플(tuple)
소괄호(‘(’ ‘)’)를 이용
	※데이터를 수정할 수 없고 읽기만 가능하기 떄문에 속도가 빠름
	튜블함수.
	len(tupleData)  -튜플의 항목 수를 반환
	min(tuple), max(tuple) -튜플에서 가장 작은 값과 큰값
	tupleData.count(value) -튜플에서 value의 개수
	tupleData.index(value,position) -position 위치 이후에서 value가 있는 인덱스


☆딕셔너리(dictionary)
 중괄호(‘{’와 ‘}’)를 이용
	dictData = {“key”:“value”, ... } 
	key - 중복x 유일한 값 ※리스트타입x  (단!튜플타입 허용)
	value - 중복o 모든타입 o 
	딕셔너리는 인덱스를 이용한 참조 x
	dictData.items() -딕셔너리의 모든 항목들을 튜플들로 반환
	dictData.keys()   -키(key)들을 반환
	dictData.values()-값(value)들을 반환

☆셋(set)
중괄호(‘{’와 ‘}’)를 이용
	순서가 정해지지 않고, 중복을 허용하지 않는 집합

☆enumerate
	반복자(iterator) or 순서(sequence) 객체를 인수
	enumerate(iter) 이라고 사용했을 경우 이 함수는 
	iter 객체를 (0,iter[0]), (1, iter[1]), (2, iter[2]), ... 이런 형식으로 반환
	
	

	
	


