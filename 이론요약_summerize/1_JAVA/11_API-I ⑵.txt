API-I ⑵

String의 문제점

※ String은 메모리를 과소비 해요
Stirng클래스는 많이 쓰이고, 좋은 기능(메소드)를 많이 가지고 있습니다. 이렇게 좋은 클래스가 치명적인 단점이 있습니다.
바로 메모리를 과소비 하는 것입니다. String객체의 경우 처음 초기화된 데이터에 변화가 생기면 기존 것을 재활용하지 않고 기존의 것은 버리고 새로운 메모리를 이용합니다.

위의 메소드는 String 객체가 가지고 있는 문자열의 내용을 바꾸는 것이 아니라 바뀐 내용을 갖는 새로운 String객체를 생성해 냅니다. 그렇기 때문에 문자열 조작을 많이 하는 프로그램에서 이런 메소드를 많이 사용하면 String 객체가 너무 많이 생기기 때문에 효율적이지 않습니다. 많은 객체를 만들게 되면 메모리도 많이 쓰게 되고 프로그램의 성능도 떨어지기 때문입니다.

3-3. StringBuffer와 StringBuilder의 등장
문자열 변수의 잦은 내용 변경이 불가피할 시에는, Stirng 클래스의 새로운 메모리를 생성하는 문제로 인해 속도가 느려 지는 현상이 있습니다.
그럴 때는 문자열 조작에 적합하게 만들어진 다른 클래스를 사용하는 것이 좋습니다.
문자열 조작에 적합하게 만들어진 클래스로는 StringBuilder클래스와 StringBuffer클래스가 있습니다. 이 클래스들은 모두 객체 내부에 있는 버퍼(buffer, 
데이터를 임시로 저장하는 메모리)에 문자열의 내용을 저장해 두고 그 안에서 추가, 수정, 삭제 작업을 합니다. 그렇게 때문에 이 클래스들은 이용하면 새로운 객체를 만들지 않고도 문자열 조작을 할 수 있습니다.
그래서 속도적인 측면에서 더욱 개선된 StringBuffer와 StringBuilder가 등장합니다.

※ StringBuilder 주요 기능(메소드)

append(String str) : 문자열 str 추가
insert(int index, String str) : 특정 index에 문자열 str 추가
delete(int start, int end) : index위치 start부터 end앞 까지 삭제
deleteCharAt(int index) : index위치의 특정 문자 하나 삭제
int capacity() : 문자열 크기 반환
ensureCapacity(int size) : 버퍼의 크기를 size만큼 늘리는 메소드
trimToSize() : 과도한 버퍼 크기를 적당하게 줄이는 메소드

※StringBuffer와 StringBuilder는 약간의 차이가 있을 뿐 같다고 생각하시면 됩니다
StringBuffer와 StringBuilder는 동일하다고 생각 하면 됩니다. 단, StringBuffer가 StringBuilder보다 먼저 세상에 등장 한 클래스 입니다. 
기능은 같고, 단지 StringBuilder가 속도 면에서 좀더 빠릅니다
                                                                                                                                                                                   2020.12.14
						                                                                                               ⓚ금경용
