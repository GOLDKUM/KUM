2020.12.16/ ⓚ금경용

예외(Exception)처리

1. 예외?
문제 없을 것 같은 프로그램도 외부환경요인 등에 의해서 문제가 발생하곤 합니다.프로그램에서 문제가 발생될 만한 곳을 예상하여 사전에 "문제가 발생하면 이렇게 해라"라고 프로그래밍 하는 것을 예외 처리.


2.예외처리
예외가 발생하더라도 계속해서 프로그램이 동작되도록 하는데 목적! 
문제가 하나 발생되었다고 그 프로세스가 완전히 정지되어 재가동전까지
구동을 하지 못한다고 한다면 손실이 상당하다
그리하여 문제가 발생해도 우회해서 가는 방법으로 계속 프로그래밍이 가동되는것이다.


3.예외처리 문법(try ~ catch)

	try {
	    try블럭 ; 익셉션이 발생할 가능성이 있는 명령문들(문제가 발생할 수 있는 로직을 기술)

	}catch(익셉션타입 익셉션변수) {
	    그 익셉션을 처리하는 명령문(try블록안에서 문제가 발생했을 때 대처방안 기술);

	} finally {
	    익셉션 발생 여부와 상관없이 맨 마지막에 실행할 명령문;
	}


★자바는 예외를 객체로 취급. 예외가 발생하면 예외 객체가 자동 생성된다.
	Exception
		IOException
		ClassNotFoundException
		RuntimeException
		ArithmeticException
		ClassCaseException
		NullPointerException
		IndexOutOfBoundsException


★catch문에 예외처리를 여러 개 할 수도 있다>
	try {
	    try블럭 ; 익셉션이 발생할 가능성이 있는 명령문들
	}catch(ArrayIndexOutOfBoundsException a) {
	    ArrayIndexOutOfBounds 익셉션을 처리하는 명령문
	} catch(NumberFormatException n) {
	    NumberFormat 익셉션을 처리하는 명령문
	} catch(Exception e) {
	    그 외 익셉션을 처리하는 명령문
	} finally {
	    익셉션 발생 여부와 상관없이 맨 마지막에 실행할 명령
	}


예외(Exception)의 종류
※ ArrayIndexOutOfBoundsException > 배열을 사용시 존재하지 않는 index값을 호출하면 발생 합니다.

※ NullPointerException > 존재하지 않는 객체를 가리킬 때 발생 합니다.

※ NumberFormatException > 숫자로 변경할 수 없는 문자열을 변경하려고 함.
