패턴:
우리의 개발자 선배님들이 객체지향 언어의 장점들을 모아 가장 효율적으로 개발을 할 수 있게 만들어 놓은 틀(프레임

싱클톤 패턴 :
 객체를 무수하게 만드는 것이 아니라 new 하여 객체를 하나만 만드는 것이다! 
 
싱글톤 패턴(Singleton pattern)이란 어떤 클래스의 객체는 오직 하나인 유일한 객체를 만들어 여러가지 상황에서 동일한 객체에 접근하기 위해 만들어진 패턴이다. 

(하나의 클래스를 통해 obj1, obj2, obj3이라는 객체 생성 시, obj2와 obj3는 전혀 다른 독립체. obj2.i와 obj3.i는 별개였지만, 
cf. 어떤 클래스는 객체를 유일하게 하나만 만들 수 있다. 

지금까지의 클래스를 잘 생각해 보면, 클래스를 하나 만들고, 만들어진 클래스로부터 객체를 여러 개 생성하여 사용하였습니다. 
하지만 싱글턴 패턴을 이용하면, 클래스 하나에 객체를 유일하게 하나만 생성하여 모든 곳에서 하나의 객체에만 접근할 수 있습니다. 
즉 전역의 개념으로 객체를 사용할 수 있습니다


스트레티지 패턴(Strategy Pattern)
기능 하나를 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다.
스트래티지를 활용하면 기능(알고리즘)을 사용하는 클라이언트와는 독립적으로 기능(알고리즘)을 변경할 수 있다.

쉽게 말하면, 어떤 객체를 만들 때 객체가 가지는 기능들이 다양하게 존재할 것 입니다. 이러한 기능들을 추상화하여 언제든지 적용할 수 있게 만드는 것입니다. 즉 기능을 부품화, 표준화 하는 것입니다.
예를 들어 엑센트와 제네시스 자동차가 있습니다. 엑센트에 들어가는 기어 연결부분과 제네시스에 들어가는 연결부분이 동일하다고(추상화) 하면, 저급기어, 중급기어, 고급기어를 만들어 두고 상황에 따라서 적당한 기어를 적용할 수 있을 것입니다. 
즉 엑센트에는 저급기어를, 제네시스에는 고급기어를 적용하는 것입니다. 이렇게 기능을 부품화하여 구조를 만드는 것을 스트레티지입니다.
                                        
                                                                                                                                                                                                   2020.12.10
						                                                                                                               ⓚ금경용

