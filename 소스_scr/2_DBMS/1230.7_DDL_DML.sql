--[VII]DDL,DML,DCL
--SQL = DDL(테이블 생성, 삭제 구조변경,테이블 데이터 제거) 
--    + DML(SELECT, INSERT, UPDATE, DELECT) 
--    + DCL(사용자계정생성, 사용자에게 권한부여, 권한박탈, 트렌젝션명령어)

--★★★DLL★★★--
--1. 테이블 생성 (CREATE TABLE)
CREATE TABLE BOOK(
    BOOKID NUMBER(5),        --도서번호
    BOOKNAME VARCHAR2(20),   --도서이름
    PUBLISHER VARCHAR2(20),  --출판자
    RDATE DATE,              --출팔일
    PRICE NUMBER(8),         --가격
    PRIMARY KEY(BOOKID)      --테이블 내 주키(PRIMARY KEY)=유일한 필드!,NUT NULL허용안함
);
DROP TABLE BOOK;             --BOOK 테이블 삭제 
CREATE TABLE BOOK(
    BOOKID NUMBER(4) PRIMARY KEY,
    BOOKNAME  VARCHAR2(20),
    PUBLISHER VARCHAR2(20),
    RDATE DATE,
    PRICE NUMBER(8)
);
SELECT * FROM BOOK;
DESC BOOK;
--ENP와 유사한 EMP01: EMPNO(NUMBER4),ENAME(VARCHAR2-20),SAL(숫자7,2)
CREATE TABLE EMP01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(20),
    SAL   NUMBER(7,2)
);
DESC EMP01;

--DEPT와 유사한 DEPT01:DEPTNO(NUMBER2),DANME(VARCHAR2 14),LOC(문자13)
CREATE TABLE DEPT01(
    DEPTNO NUMBER(2),
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13)
);
DESC DEPT01;
--서브쿼리를 이용한 테이블 생성%테스트용

CREATE TABLE EMP02 
    AS
    SELECT * FROM EMP;--서브커리 결과만 EMP02(제약조건은 들어가지 않음!)
SELECT * FROM EMP;
DESC EMP02;
INSERT INTO EMP02(EMPNO, ENAME, DEPTNO) VALUES(7369,'HONG',90);

--EMP03; EMP테이블에서 EMPNO,ENAME,DEPTNO만 추출
CREATE TABLE EMP03
    AS
    SELECT EMPNO,ENAME,DEPTNO FROM EMP;
SELECT * FROM EMP03;

--EMP04; EMP테이블에서 10번 부서만 추철
CREATE TABLE EMP04
    AS
    SELECT * FROM EMP WHERE DEPTNO=10;
SELECT * FROM EMP04;

--EMP05; EMP테이블의 구조만 추출 
CREATE TABLE EMP05
    AS
    SELECT * FROM EMP WHERE 1=0;
SELECT * FROM EMP05;

--2.테이블 구조 변경(ALTER TABLE)
--ALATER TABLE 테이블 명
--ADD||MODIFY||DROP ~
--(1)필드 추가 (ADD)
SELECT * FROM EMP03;
ALTER TABLE EMP03 ADD(JOB VARCHAR2(10),SAL NUMBER(7,2));
SELECT * FROM EMP03;
ALTER TABLE EMP03 ADD(MGR NUMBER(4));

--(2)필드 타입 수정(MODIFY)
ALTER TABLE EMP03 MODIFY (EMPNO VARCHAR2(5));--숫자데이터가 들어있는 상태
ALTER TABLE EMP03 MODIFY (JOB VARCHAR2(20));--NULL이기 떄문에 가능
DESC EMP03;
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(200));
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(5));--6byte자료가 존재. 정의불가!
--(3)필드 삭제%제거(DROP)
SELECT * FROM EMP03;
ALTER TABLE EMP03 DROP COLUMN DEPTNO;--데이터 복구 불가 
--논리적으로 특정 필드를 적근 못하도록(낮)
ALTER TABLE EMP03 SET UNUSED(SAL);
SELECT *FROM EMP03;
--논지적으로 접근 불가했던 필들를 삭제(새벽)
ALTER TABLE EMP03 DROP UNUSED COLUMNS ;--물리적 삭제시 테이블 액세서 불가 

--3.테이블 삭제(DROP TABLE)
SELECT * FROM EMP01;
DROP TABLE EMP01;
DROP TABLE DEPT;--다른 테이블에서 참조하는 데이터가 있을 경우 DROP불가! 

--4.테이블 내에 데이터 싹 다 제거(TRUNCATE )
SELECT * FROM EMP02;
TRUNCATE TABLE EMP02;--DDL명령어는 취소불가! 

--5.테이블 이름 변경
SELECT * FROM EMP3;
RENAME EMP03 TO EMP3;
ROLLBACK;

--6.데이터딕셔너리(접근불가) -> 데이터딕셔너리뷰(사용자 접근용)
    --DBA_TABLES, DBA_INDEXES,DBA_CONSTRAINTS,_DBA_VIEWS;
    --USER_TABLES, USER_INDEXES,USER_CONSTRAINTS,USER_VIEWS;
    --ALL_TABLES, ALL_INDEXES,ALL_CONSTRAINTS,ALL_VIEWS;
--USER_XXX;SCOTT이 소유한 객체(테이블,인덱스,...) 정보 조회 
SHOW USER;--USER이름을 볼수있음! 
SELECT TABLE_NAME FROM USER_TABLES;
SELECT * FROM USER_TABLES;
SELECT * FROM USER_INDEXES;
SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_VIEWS;
DROP TABLE BOOK;
CREATE TABLE BOOK(
    BOOKID NUMBER(4) CONSTRAINT BP PRIMARY KEY,
    BOOKNAME VARCHAR2(100),
    PUBLISHER VARCHAR2(100),
    RDATE DATE,
    PRICE NUMBER(8)
);
--DBA_xxx; DBA권한을 가진 사용자만 접근 가능한 객체 정보 
SELECT * FROM DBA_TABLES;
SELECT TABLE_NAME, OWNER FROM DBA_TABLES;
SELECT * FROM DBA_INDEXES;
SELECT * FROM DBA_CONSTRAINTS;
SELECT * FROM DBA_VIEWS;
--ALL_xxx; SCOTT이 소유한 객체나 권한이 부여된 객체! 
SELECT * FROM ALL_TABLES;
SELECT * FROM ALL_CONSTRAINTS;
SELECT * FROM ALL_INDEXES;
SELECT * FROM ALL_VIEWS;

----------------------------------------------------------------
--★★★DML★★★--
--7.DML; SELECT,INSERT,UPDATE,DELETE
--(1) INSERT INTO 테이블이름(필드명1,필드명2,....)
--                       VALUES(값1, 값2, ...);
--    INSERT INTO 테이블이름 VALUES(값1, 값2,...);
SELECT * FROM DEPT01;
INSERT INTO DEPT01 (DEPTNO,DNAME,LOC)
                VALUES(10, 'ACCOUNTING','NEW YORK');
INSERT INTO DEPT01(DNAME,LOC,DEPTNO)
                VALUES('SALES','BOSTON',20 );

--NULL값 입력은 입력하지 않으면 NULL이 자동입력 
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC)
                VALUES(30,'IT','NULL');
INSERT INTO DEPT01 (DEPTNO,DNAME)
                VALUES(40,'OPERATION');
SELECT * FROM DEPT01;
--INSERT문에서 필드명 생략시 반드시 3개 필드값이 다 와야 함.
INSERT INTO DEPT01 VALUES(50,'설계','마포');
DESC DEPT01;--PK 없는 DEPT01 

--DEPT01 테이블에 DEPT테이블 10~30번 부서까지 내용을 INSERT 
INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO<40;
SELECT * FROM DEPT01;
--BOOK테이블에 11번, '스포츠의학', 한솔출판,출판일 오늘, 가격은90000
SELECT * FROM BOOK;
INSERT INTO BOOK(BOOKID,BOOKNAME,PUBLISHER,RDATE,PRICE)
        VALUES(11,'스포츠의학','한솔출판',SYSDATE,90000); 
        
INSERT INTO BOOK VALUES(11,'스포츠의학','한솔출판',SYSDATE,90000); 
COMMIT;--DML 명령어는 트랜잭션 단위로 진행. 
ROLLBACK; --트랜젝션 안에 있는 DML명령어를 취소 
DROP TABLE SAM01;
CREATE TABLE SAM01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(20),
    JOB VARCHAR2(20),
    SAL NUMBER(8,2),
    PRIMARY KEY(EMPNO)
);
SELECT * FROM SAM01;
INSERT INTO SAM01(EMPNO,ENAME,JOB,SAL) VALUES
    (1000,'APPLE','POLICE',10000);
INSERT INTO SAM01(EMPNO,ENAME,JOB,SAL) VALUES
    (1010,'BANANA','NURSE',15000);
INSERT INTO SAM01(EMPNO,ENAME,JOB,SAL) VALUES
    (1020,'ORANGE','DOCTOR',25000);
INSERT INTO SAM01(EMPNO,ENAME,JOB,SAL) VALUES
    (1030,'VERY',NULL,25000);
INSERT INTO SAM01(EMPNO,ENAME,JOB,SAL) VALUES
    (1040,'CAT',NULL,2000);
INSERT INTO SAM01 
     SELECT EMPNO,ENAME,JOB,SAL FROM EMP WHERE DEPTNO=10;

--(2)UPDATE 테이블이름 SET 필드명1=값1[, 필드명2=2,....][WHERE 조건]; 
DROP TABLE EMP01;
CREATE TABLE EMP01
    AS SELECT * FROM EMP;
SELECT * FROM EMP01;

--부서번호를 30으로 수정
UPDATE EMP01 SET DEPTNO=30;
ROLLBACK;

--모든 직원의 급여를 10%인상하시오
UPDATE EMP01 SET SAL=SAL*1.1;
SELECT * FROM EMP01;
COMMIT;

--특정 행의 데이터만 수정하고자 할 떄는 WHERE필수! 
--10번 부서 직원의 입사일을 오늘로 수정하고, 부서번호는 30번 부서로 수정 
UPDATE EMP01 SET HIREDATE=SYSDATE, DEPTNO=30
    WHERE DEPTNO=10;
SELECT * FROM EMP01;

--SAL이 3000이상인 사원만 급여를 10%인상하시오
UPDATE EMP01 SET SAL=SAL*1.1 WHERE SAL>=3000;

-- 'DALLAS'에 근무하는 직원들의 급여를 1000인상
UPDATE EMP01 SET SAL=SAL+1000 
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS');
SELECT * FROM EMP01;

--●SCOTT사원의 부서번호는 20으로 JOB은 MANAGER로 수정하는 SQL 
UPDATE EMP01 SET DEPTNO=20,JOB='MANAGER'
    WHERE ENAME='SCOTT';
SELECT * FROM EMP01 WHERE ENAME='SCOTT';

--SCOTT사원의 입사일을 오늘로, 급여는 50,COMM은 400수정
UPDATE EMP01 SET SAL=50, HIREDATE=SYSDATE, COMM=400
    WHERE ENAME='SCOTT';

--서브쿼리를 이용한 UPDATE문
--DEPT01에서 20부터의 지역명을 40번 부서의 지역명으로 변경
SELECT * FROM DEPT01;
UPDATE DEPT01 SET LOC='마포' WHERE DEPTNO=40;
SELECT * FROM DEPT01;
UPDATE DEPT01 SET (DNAME) =(SELECT DNAME FROM DEPT01
                                 WHERE DEPTNO=40)
                         WHERE DEPTNO=20;

--DEPT01에서 20부터의 지역명을 40번 부서의 부서명, 지역명으로 변경
UPDATE DEPT01 SET (DNAME,LOC) =(SELECT DNAME, LOC FROM DEPT01
                                 WHERE DEPTNO=40)
                         WHERE DEPTNO=20;
SELECT * FROM DEPT01 WHERE DEPTNO IN (20,40);
--EMP01테이블의 모든 사원의 급여와 입사일을 'KING'의 급여와 입사일로 수정 
UPDATE EMP01 SET (SAL,HIREDATE)=(SELECT SAL,HIREDATE FROM EMP01
                                 WHERE ENAME='KING');
SELECT * FROM EMP01;

--UPDATE 테이블명 SET 필드명=값, 필드명=값
--(3) DELETE FROM 테이블명 WHERE 조건;
COMMIT;
SELECT * FROM EMP01;
DELETE FROM EMP01;
ROLLBACK;
--EMP01테이블에서 30부서 직원만 삭제 
DELETE FROM EMP01 WHERE DEPTNO=30;
--SAM01테이블에서 JOB이 정해지지않는 사원을 삭제 
SELECT * FROM SAM01;
DELETE FROM SAM01 WHERE JOB IS NULL;
--EMP01테이블에서 부서명이 SALES인 사원을 삭제
SELECT * FROM EMP01;
DELETE FROM EMP01 
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
--EMP01테이블에서 RESEARCH 부서 소속인 사원 삭제
DELETE FROM EMP01
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH');



--연습문제
--9번은 DROP
DROP TABLE MY_DATE;
CREATE TABLE MY_DATE(
    ID NUMBER(20),
    NAME VARCHAR2(20),
    USERID VARCHAR2(20),
    SALARY NUMBER(30,2),
    PRIMARY KEY(ID)
    );

SELECT * FROM MY_DATE;
DESC MY_DATE; 
INSERT INTO MY_DATE (ID,NAME,USERID,SALARY)
    VALUES (1,'Scott','sscott',TO_NUMBER('10,000.00','99,999.99'));--문자를 숫자를! 
INSERT INTO MY_DATE (ID,NAME,USERID,SALARY)
    VALUES (2,'Ford','fford',13000.00);
INSERT INTO MY_DATE (ID,NAME,USERID,SALARY)
    VALUES (3,'Patel','ppatel',33000.00);
INSERT INTO MY_DATE (ID,NAME,USERID,SALARY)
    VALUES (4,'Report','rreport',23500.00);
INSERT INTO MY_DATE (ID,NAME,USERID,SALARY)
    VALUES (5,'Good','ggood',44450.00);
COMMIT;
SELECT * FROM MY_DATE;
UPDATE MY_DATE SET SALARY=65000 WHERE ID=3; 
COMMIT;
DELETE FROM MY_DATE WHERE INITCAP(NAME)='Ford'; 
COMMIT;
UPDATE MY_DATE SET SALARY=15000 WHERE SALARY<=15000;
DROP TABLE MY_DATE ;


--★★★ ERD : 구조화된 데이터를 저장하기 위해 DB를 사용하는데,
--              DB의 구조와 제약조건등 다양한 기법을 설계하는 툴 
CREATE TABLE DEPT1(
    DEPTNO NUMBER(2),
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13),
    PRIMARY KEY(DEPTNO)
);
SELECT * FROM DEPT1;

CREATE TABLE EMP1( --제약조건은 부적합한 데이터 삽입 방지 수단
    EMPNO NUMBER(4) PRIMARY KEY, --제약조건1. PRIMARY KEY
    ENAME VARCHAR2(10) UNIQUE,   --제약조건2. UNIQUE
    JOB VARCHAR2(9) NOT NULL,    --제약조건3. NOT NULL
    MGR NUMBER(4),
    HIREDATE DATE DEFAULT SYSDATE,--제약조건4. DEFAULT
    SAL NUMBER(7,2)CHECK (SAL>0), --제약조건5. CHECK
    COMM NUMBER(7,2),
    DEPTNO NUMBER(2) REFERENCES DEPT1(DEPTNO)--제약조건6. REFERENCES
);
SELECT * FROM DEPT1;
INSERT INTO DEPT1 VALUES (10,'회계','신촌');
INSERT INTO DEPT1 VALUES (20,'설계','마포');
INSERT INTO DEPT1 VALUES (30,'영업','이대');
INSERT INTO DEPT1 VALUES (40,'전산','공덕');
--EMP1입력
SELECT * FROM EMP1;
INSERT INTO EMP1(EMPNO,ENAME,JOB,MGR,SAL,DEPTNO)
    VALUES(1111,'홍가','회장',NULL,9000,40);
SELECT * FROM EMP1;
INSERT INTO EMP1(EMPNO,ENAME,JOB,MGR,SAL,DEPTNO)
    VALUES(1112,'홍군','전무',1111,1000,30);




